// Mocks generated by Mockito 5.4.5 from annotations
// in repondo/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:firebase_auth/firebase_auth.dart' as _i4;
import 'package:firebase_auth_platform_interface/firebase_auth_platform_interface.dart'
    as _i3;
import 'package:firebase_core/firebase_core.dart' as _i2;
import 'package:flutter/foundation.dart' as _i8;
import 'package:flutter/src/widgets/notification_listener.dart' as _i15;
import 'package:flutter/widgets.dart' as _i7;
import 'package:go_router/src/state.dart' as _i16;
import 'package:google_sign_in/google_sign_in.dart' as _i5;
import 'package:google_sign_in_platform_interface/google_sign_in_platform_interface.dart'
    as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:repondo/core/result/exports.dart' as _i17;
import 'package:repondo/features/auth/application/facades/google_auth_facade.dart'
    as _i14;
import 'package:repondo/features/auth/application/usecases/email_auth/sign_in_with_email_and_password_use_case.dart'
    as _i18;
import 'package:repondo/features/auth/application/usecases/email_auth/sign_up_with_email_use_case.dart'
    as _i19;
import 'package:repondo/features/auth/application/usecases/google_auth/exports.dart'
    as _i13;
import 'package:repondo/features/auth/domain/entities/user_auth.dart' as _i6;
import 'package:repondo/features/auth/domain/exports.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseApp_0 extends _i1.SmartFake implements _i2.FirebaseApp {
  _FakeFirebaseApp_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeActionCodeInfo_1 extends _i1.SmartFake
    implements _i3.ActionCodeInfo {
  _FakeActionCodeInfo_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserCredential_2 extends _i1.SmartFake
    implements _i4.UserCredential {
  _FakeUserCredential_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConfirmationResult_3 extends _i1.SmartFake
    implements _i4.ConfirmationResult {
  _FakeConfirmationResult_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserMetadata_4 extends _i1.SmartFake implements _i3.UserMetadata {
  _FakeUserMetadata_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMultiFactor_5 extends _i1.SmartFake implements _i4.MultiFactor {
  _FakeMultiFactor_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIdTokenResult_6 extends _i1.SmartFake implements _i3.IdTokenResult {
  _FakeIdTokenResult_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUser_7 extends _i1.SmartFake implements _i4.User {
  _FakeUser_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGoogleSignInAuthentication_8 extends _i1.SmartFake
    implements _i5.GoogleSignInAuthentication {
  _FakeGoogleSignInAuthentication_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserAuth_9 extends _i1.SmartFake implements _i6.UserAuth {
  _FakeUserAuth_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWidget_10 extends _i1.SmartFake implements _i7.Widget {
  _FakeWidget_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i8.DiagnosticLevel? minLevel = _i8.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_11 extends _i1.SmartFake
    implements _i7.InheritedWidget {
  _FakeInheritedWidget_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i8.DiagnosticLevel? minLevel = _i8.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_12 extends _i1.SmartFake
    implements _i8.DiagnosticsNode {
  _FakeDiagnosticsNode_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({
    _i8.TextTreeConfiguration? parentConfiguration,
    _i8.DiagnosticLevel? minLevel = _i8.DiagnosticLevel.info,
  }) => super.toString();
}

class _FakeUri_13 extends _i1.SmartFake implements Uri {
  _FakeUri_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeValueKey_14<T> extends _i1.SmartFake implements _i8.ValueKey<T> {
  _FakeValueKey_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FirebaseAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuth extends _i1.Mock implements _i4.FirebaseAuth {
  MockFirebaseAuth() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app =>
      (super.noSuchMethod(
            Invocation.getter(#app),
            returnValue: _FakeFirebaseApp_0(this, Invocation.getter(#app)),
          )
          as _i2.FirebaseApp);

  @override
  set app(_i2.FirebaseApp? _app) => super.noSuchMethod(
    Invocation.setter(#app, _app),
    returnValueForMissingStub: null,
  );

  @override
  set tenantId(String? tenantId) => super.noSuchMethod(
    Invocation.setter(#tenantId, tenantId),
    returnValueForMissingStub: null,
  );

  @override
  set customAuthDomain(String? customAuthDomain) => super.noSuchMethod(
    Invocation.setter(#customAuthDomain, customAuthDomain),
    returnValueForMissingStub: null,
  );

  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(
            Invocation.getter(#pluginConstants),
            returnValue: <dynamic, dynamic>{},
          )
          as Map<dynamic, dynamic>);

  @override
  _i9.Future<void> useAuthEmulator(
    String? host,
    int? port, {
    bool? automaticHostMapping = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #useAuthEmulator,
              [host, port],
              {#automaticHostMapping: automaticHostMapping},
            ),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> applyActionCode(String? code) =>
      (super.noSuchMethod(
            Invocation.method(#applyActionCode, [code]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<_i3.ActionCodeInfo> checkActionCode(String? code) =>
      (super.noSuchMethod(
            Invocation.method(#checkActionCode, [code]),
            returnValue: _i9.Future<_i3.ActionCodeInfo>.value(
              _FakeActionCodeInfo_1(
                this,
                Invocation.method(#checkActionCode, [code]),
              ),
            ),
          )
          as _i9.Future<_i3.ActionCodeInfo>);

  @override
  _i9.Future<void> confirmPasswordReset({
    required String? code,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#confirmPasswordReset, [], {
              #code: code,
              #newPassword: newPassword,
            }),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<_i4.UserCredential> createUserWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createUserWithEmailAndPassword, [], {
              #email: email,
              #password: password,
            }),
            returnValue: _i9.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#createUserWithEmailAndPassword, [], {
                  #email: email,
                  #password: password,
                }),
              ),
            ),
          )
          as _i9.Future<_i4.UserCredential>);

  @override
  _i9.Future<List<String>> fetchSignInMethodsForEmail(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#fetchSignInMethodsForEmail, [email]),
            returnValue: _i9.Future<List<String>>.value(<String>[]),
          )
          as _i9.Future<List<String>>);

  @override
  _i9.Future<_i4.UserCredential> getRedirectResult() =>
      (super.noSuchMethod(
            Invocation.method(#getRedirectResult, []),
            returnValue: _i9.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#getRedirectResult, []),
              ),
            ),
          )
          as _i9.Future<_i4.UserCredential>);

  @override
  bool isSignInWithEmailLink(String? emailLink) =>
      (super.noSuchMethod(
            Invocation.method(#isSignInWithEmailLink, [emailLink]),
            returnValue: false,
          )
          as bool);

  @override
  _i9.Stream<_i4.User?> authStateChanges() =>
      (super.noSuchMethod(
            Invocation.method(#authStateChanges, []),
            returnValue: _i9.Stream<_i4.User?>.empty(),
          )
          as _i9.Stream<_i4.User?>);

  @override
  _i9.Stream<_i4.User?> idTokenChanges() =>
      (super.noSuchMethod(
            Invocation.method(#idTokenChanges, []),
            returnValue: _i9.Stream<_i4.User?>.empty(),
          )
          as _i9.Stream<_i4.User?>);

  @override
  _i9.Stream<_i4.User?> userChanges() =>
      (super.noSuchMethod(
            Invocation.method(#userChanges, []),
            returnValue: _i9.Stream<_i4.User?>.empty(),
          )
          as _i9.Stream<_i4.User?>);

  @override
  _i9.Future<void> sendPasswordResetEmail({
    required String? email,
    _i3.ActionCodeSettings? actionCodeSettings,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sendPasswordResetEmail, [], {
              #email: email,
              #actionCodeSettings: actionCodeSettings,
            }),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> sendSignInLinkToEmail({
    required String? email,
    required _i3.ActionCodeSettings? actionCodeSettings,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sendSignInLinkToEmail, [], {
              #email: email,
              #actionCodeSettings: actionCodeSettings,
            }),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> setLanguageCode(String? languageCode) =>
      (super.noSuchMethod(
            Invocation.method(#setLanguageCode, [languageCode]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> setSettings({
    bool? appVerificationDisabledForTesting = false,
    String? userAccessGroup,
    String? phoneNumber,
    String? smsCode,
    bool? forceRecaptchaFlow,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#setSettings, [], {
              #appVerificationDisabledForTesting:
                  appVerificationDisabledForTesting,
              #userAccessGroup: userAccessGroup,
              #phoneNumber: phoneNumber,
              #smsCode: smsCode,
              #forceRecaptchaFlow: forceRecaptchaFlow,
            }),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> setPersistence(_i3.Persistence? persistence) =>
      (super.noSuchMethod(
            Invocation.method(#setPersistence, [persistence]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<_i4.UserCredential> signInAnonymously() =>
      (super.noSuchMethod(
            Invocation.method(#signInAnonymously, []),
            returnValue: _i9.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#signInAnonymously, []),
              ),
            ),
          )
          as _i9.Future<_i4.UserCredential>);

  @override
  _i9.Future<_i4.UserCredential> signInWithCredential(
    _i3.AuthCredential? credential,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithCredential, [credential]),
            returnValue: _i9.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#signInWithCredential, [credential]),
              ),
            ),
          )
          as _i9.Future<_i4.UserCredential>);

  @override
  _i9.Future<_i4.UserCredential> signInWithCustomToken(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithCustomToken, [token]),
            returnValue: _i9.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#signInWithCustomToken, [token]),
              ),
            ),
          )
          as _i9.Future<_i4.UserCredential>);

  @override
  _i9.Future<_i4.UserCredential> signInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmailAndPassword, [], {
              #email: email,
              #password: password,
            }),
            returnValue: _i9.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#signInWithEmailAndPassword, [], {
                  #email: email,
                  #password: password,
                }),
              ),
            ),
          )
          as _i9.Future<_i4.UserCredential>);

  @override
  _i9.Future<_i4.UserCredential> signInWithEmailLink({
    required String? email,
    required String? emailLink,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmailLink, [], {
              #email: email,
              #emailLink: emailLink,
            }),
            returnValue: _i9.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#signInWithEmailLink, [], {
                  #email: email,
                  #emailLink: emailLink,
                }),
              ),
            ),
          )
          as _i9.Future<_i4.UserCredential>);

  @override
  _i9.Future<_i4.UserCredential> signInWithProvider(
    _i3.AuthProvider? provider,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithProvider, [provider]),
            returnValue: _i9.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#signInWithProvider, [provider]),
              ),
            ),
          )
          as _i9.Future<_i4.UserCredential>);

  @override
  _i9.Future<_i4.ConfirmationResult> signInWithPhoneNumber(
    String? phoneNumber, [
    _i4.RecaptchaVerifier? verifier,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithPhoneNumber, [phoneNumber, verifier]),
            returnValue: _i9.Future<_i4.ConfirmationResult>.value(
              _FakeConfirmationResult_3(
                this,
                Invocation.method(#signInWithPhoneNumber, [
                  phoneNumber,
                  verifier,
                ]),
              ),
            ),
          )
          as _i9.Future<_i4.ConfirmationResult>);

  @override
  _i9.Future<_i4.UserCredential> signInWithPopup(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithPopup, [provider]),
            returnValue: _i9.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#signInWithPopup, [provider]),
              ),
            ),
          )
          as _i9.Future<_i4.UserCredential>);

  @override
  _i9.Future<void> signInWithRedirect(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithRedirect, [provider]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<String> verifyPasswordResetCode(String? code) =>
      (super.noSuchMethod(
            Invocation.method(#verifyPasswordResetCode, [code]),
            returnValue: _i9.Future<String>.value(
              _i10.dummyValue<String>(
                this,
                Invocation.method(#verifyPasswordResetCode, [code]),
              ),
            ),
          )
          as _i9.Future<String>);

  @override
  _i9.Future<void> verifyPhoneNumber({
    String? phoneNumber,
    _i3.PhoneMultiFactorInfo? multiFactorInfo,
    required _i3.PhoneVerificationCompleted? verificationCompleted,
    required _i3.PhoneVerificationFailed? verificationFailed,
    required _i3.PhoneCodeSent? codeSent,
    required _i3.PhoneCodeAutoRetrievalTimeout? codeAutoRetrievalTimeout,
    String? autoRetrievedSmsCodeForTesting,
    Duration? timeout = const Duration(seconds: 30),
    int? forceResendingToken,
    _i3.MultiFactorSession? multiFactorSession,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#verifyPhoneNumber, [], {
              #phoneNumber: phoneNumber,
              #multiFactorInfo: multiFactorInfo,
              #verificationCompleted: verificationCompleted,
              #verificationFailed: verificationFailed,
              #codeSent: codeSent,
              #codeAutoRetrievalTimeout: codeAutoRetrievalTimeout,
              #autoRetrievedSmsCodeForTesting: autoRetrievedSmsCodeForTesting,
              #timeout: timeout,
              #forceResendingToken: forceResendingToken,
              #multiFactorSession: multiFactorSession,
            }),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> revokeTokenWithAuthorizationCode(
    String? authorizationCode,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#revokeTokenWithAuthorizationCode, [
              authorizationCode,
            ]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);
}

/// A class which mocks [UserCredential].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserCredential extends _i1.Mock implements _i4.UserCredential {
  MockUserCredential() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i4.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get emailVerified =>
      (super.noSuchMethod(Invocation.getter(#emailVerified), returnValue: false)
          as bool);

  @override
  bool get isAnonymous =>
      (super.noSuchMethod(Invocation.getter(#isAnonymous), returnValue: false)
          as bool);

  @override
  _i3.UserMetadata get metadata =>
      (super.noSuchMethod(
            Invocation.getter(#metadata),
            returnValue: _FakeUserMetadata_4(
              this,
              Invocation.getter(#metadata),
            ),
          )
          as _i3.UserMetadata);

  @override
  List<_i3.UserInfo> get providerData =>
      (super.noSuchMethod(
            Invocation.getter(#providerData),
            returnValue: <_i3.UserInfo>[],
          )
          as List<_i3.UserInfo>);

  @override
  String get uid =>
      (super.noSuchMethod(
            Invocation.getter(#uid),
            returnValue: _i10.dummyValue<String>(this, Invocation.getter(#uid)),
          )
          as String);

  @override
  _i4.MultiFactor get multiFactor =>
      (super.noSuchMethod(
            Invocation.getter(#multiFactor),
            returnValue: _FakeMultiFactor_5(
              this,
              Invocation.getter(#multiFactor),
            ),
          )
          as _i4.MultiFactor);

  @override
  _i9.Future<void> delete() =>
      (super.noSuchMethod(
            Invocation.method(#delete, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<String?> getIdToken([bool? forceRefresh = false]) =>
      (super.noSuchMethod(
            Invocation.method(#getIdToken, [forceRefresh]),
            returnValue: _i9.Future<String?>.value(),
          )
          as _i9.Future<String?>);

  @override
  _i9.Future<_i3.IdTokenResult> getIdTokenResult([
    bool? forceRefresh = false,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#getIdTokenResult, [forceRefresh]),
            returnValue: _i9.Future<_i3.IdTokenResult>.value(
              _FakeIdTokenResult_6(
                this,
                Invocation.method(#getIdTokenResult, [forceRefresh]),
              ),
            ),
          )
          as _i9.Future<_i3.IdTokenResult>);

  @override
  _i9.Future<_i4.UserCredential> linkWithCredential(
    _i3.AuthCredential? credential,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#linkWithCredential, [credential]),
            returnValue: _i9.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#linkWithCredential, [credential]),
              ),
            ),
          )
          as _i9.Future<_i4.UserCredential>);

  @override
  _i9.Future<_i4.UserCredential> linkWithProvider(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(
            Invocation.method(#linkWithProvider, [provider]),
            returnValue: _i9.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#linkWithProvider, [provider]),
              ),
            ),
          )
          as _i9.Future<_i4.UserCredential>);

  @override
  _i9.Future<_i4.UserCredential> reauthenticateWithProvider(
    _i3.AuthProvider? provider,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#reauthenticateWithProvider, [provider]),
            returnValue: _i9.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#reauthenticateWithProvider, [provider]),
              ),
            ),
          )
          as _i9.Future<_i4.UserCredential>);

  @override
  _i9.Future<_i4.UserCredential> reauthenticateWithPopup(
    _i3.AuthProvider? provider,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#reauthenticateWithPopup, [provider]),
            returnValue: _i9.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#reauthenticateWithPopup, [provider]),
              ),
            ),
          )
          as _i9.Future<_i4.UserCredential>);

  @override
  _i9.Future<void> reauthenticateWithRedirect(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(
            Invocation.method(#reauthenticateWithRedirect, [provider]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<_i4.UserCredential> linkWithPopup(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(
            Invocation.method(#linkWithPopup, [provider]),
            returnValue: _i9.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#linkWithPopup, [provider]),
              ),
            ),
          )
          as _i9.Future<_i4.UserCredential>);

  @override
  _i9.Future<void> linkWithRedirect(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(
            Invocation.method(#linkWithRedirect, [provider]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<_i4.ConfirmationResult> linkWithPhoneNumber(
    String? phoneNumber, [
    _i4.RecaptchaVerifier? verifier,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#linkWithPhoneNumber, [phoneNumber, verifier]),
            returnValue: _i9.Future<_i4.ConfirmationResult>.value(
              _FakeConfirmationResult_3(
                this,
                Invocation.method(#linkWithPhoneNumber, [
                  phoneNumber,
                  verifier,
                ]),
              ),
            ),
          )
          as _i9.Future<_i4.ConfirmationResult>);

  @override
  _i9.Future<_i4.UserCredential> reauthenticateWithCredential(
    _i3.AuthCredential? credential,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#reauthenticateWithCredential, [credential]),
            returnValue: _i9.Future<_i4.UserCredential>.value(
              _FakeUserCredential_2(
                this,
                Invocation.method(#reauthenticateWithCredential, [credential]),
              ),
            ),
          )
          as _i9.Future<_i4.UserCredential>);

  @override
  _i9.Future<void> reload() =>
      (super.noSuchMethod(
            Invocation.method(#reload, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> sendEmailVerification([
    _i3.ActionCodeSettings? actionCodeSettings,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#sendEmailVerification, [actionCodeSettings]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<_i4.User> unlink(String? providerId) =>
      (super.noSuchMethod(
            Invocation.method(#unlink, [providerId]),
            returnValue: _i9.Future<_i4.User>.value(
              _FakeUser_7(this, Invocation.method(#unlink, [providerId])),
            ),
          )
          as _i9.Future<_i4.User>);

  @override
  _i9.Future<void> updateEmail(String? newEmail) =>
      (super.noSuchMethod(
            Invocation.method(#updateEmail, [newEmail]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> updatePassword(String? newPassword) =>
      (super.noSuchMethod(
            Invocation.method(#updatePassword, [newPassword]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> updatePhoneNumber(
    _i3.PhoneAuthCredential? phoneCredential,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updatePhoneNumber, [phoneCredential]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> updateDisplayName(String? displayName) =>
      (super.noSuchMethod(
            Invocation.method(#updateDisplayName, [displayName]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> updatePhotoURL(String? photoURL) =>
      (super.noSuchMethod(
            Invocation.method(#updatePhotoURL, [photoURL]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> updateProfile({String? displayName, String? photoURL}) =>
      (super.noSuchMethod(
            Invocation.method(#updateProfile, [], {
              #displayName: displayName,
              #photoURL: photoURL,
            }),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> verifyBeforeUpdateEmail(
    String? newEmail, [
    _i3.ActionCodeSettings? actionCodeSettings,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#verifyBeforeUpdateEmail, [
              newEmail,
              actionCodeSettings,
            ]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);
}

/// A class which mocks [UserInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserInfo extends _i1.Mock implements _i3.UserInfo {
  MockUserInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get providerId =>
      (super.noSuchMethod(
            Invocation.getter(#providerId),
            returnValue: _i10.dummyValue<String>(
              this,
              Invocation.getter(#providerId),
            ),
          )
          as String);
}

/// A class which mocks [GoogleSignIn].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleSignIn extends _i1.Mock implements _i5.GoogleSignIn {
  MockGoogleSignIn() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.SignInOption get signInOption =>
      (super.noSuchMethod(
            Invocation.getter(#signInOption),
            returnValue: _i11.SignInOption.standard,
          )
          as _i11.SignInOption);

  @override
  List<String> get scopes =>
      (super.noSuchMethod(Invocation.getter(#scopes), returnValue: <String>[])
          as List<String>);

  @override
  bool get forceCodeForRefreshToken =>
      (super.noSuchMethod(
            Invocation.getter(#forceCodeForRefreshToken),
            returnValue: false,
          )
          as bool);

  @override
  _i9.Stream<_i5.GoogleSignInAccount?> get onCurrentUserChanged =>
      (super.noSuchMethod(
            Invocation.getter(#onCurrentUserChanged),
            returnValue: _i9.Stream<_i5.GoogleSignInAccount?>.empty(),
          )
          as _i9.Stream<_i5.GoogleSignInAccount?>);

  @override
  _i9.Future<_i5.GoogleSignInAccount?> signInSilently({
    bool? suppressErrors = true,
    bool? reAuthenticate = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInSilently, [], {
              #suppressErrors: suppressErrors,
              #reAuthenticate: reAuthenticate,
            }),
            returnValue: _i9.Future<_i5.GoogleSignInAccount?>.value(),
          )
          as _i9.Future<_i5.GoogleSignInAccount?>);

  @override
  _i9.Future<bool> isSignedIn() =>
      (super.noSuchMethod(
            Invocation.method(#isSignedIn, []),
            returnValue: _i9.Future<bool>.value(false),
          )
          as _i9.Future<bool>);

  @override
  _i9.Future<_i5.GoogleSignInAccount?> signIn() =>
      (super.noSuchMethod(
            Invocation.method(#signIn, []),
            returnValue: _i9.Future<_i5.GoogleSignInAccount?>.value(),
          )
          as _i9.Future<_i5.GoogleSignInAccount?>);

  @override
  _i9.Future<_i5.GoogleSignInAccount?> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i9.Future<_i5.GoogleSignInAccount?>.value(),
          )
          as _i9.Future<_i5.GoogleSignInAccount?>);

  @override
  _i9.Future<_i5.GoogleSignInAccount?> disconnect() =>
      (super.noSuchMethod(
            Invocation.method(#disconnect, []),
            returnValue: _i9.Future<_i5.GoogleSignInAccount?>.value(),
          )
          as _i9.Future<_i5.GoogleSignInAccount?>);

  @override
  _i9.Future<bool> requestScopes(List<String>? scopes) =>
      (super.noSuchMethod(
            Invocation.method(#requestScopes, [scopes]),
            returnValue: _i9.Future<bool>.value(false),
          )
          as _i9.Future<bool>);

  @override
  _i9.Future<bool> canAccessScopes(
    List<String>? scopes, {
    String? accessToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #canAccessScopes,
              [scopes],
              {#accessToken: accessToken},
            ),
            returnValue: _i9.Future<bool>.value(false),
          )
          as _i9.Future<bool>);
}

/// A class which mocks [GoogleSignInAccount].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockGoogleSignInAccount extends _i1.Mock
    implements _i5.GoogleSignInAccount {
  MockGoogleSignInAccount() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get email =>
      (super.noSuchMethod(
            Invocation.getter(#email),
            returnValue: _i10.dummyValue<String>(
              this,
              Invocation.getter(#email),
            ),
          )
          as String);

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i10.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  _i9.Future<_i5.GoogleSignInAuthentication> get authentication =>
      (super.noSuchMethod(
            Invocation.getter(#authentication),
            returnValue: _i9.Future<_i5.GoogleSignInAuthentication>.value(
              _FakeGoogleSignInAuthentication_8(
                this,
                Invocation.getter(#authentication),
              ),
            ),
          )
          as _i9.Future<_i5.GoogleSignInAuthentication>);

  @override
  _i9.Future<Map<String, String>> get authHeaders =>
      (super.noSuchMethod(
            Invocation.getter(#authHeaders),
            returnValue: _i9.Future<Map<String, String>>.value(
              <String, String>{},
            ),
          )
          as _i9.Future<Map<String, String>>);

  @override
  _i9.Future<void> clearAuthCache() =>
      (super.noSuchMethod(
            Invocation.method(#clearAuthCache, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);
}

/// A class which mocks [GoogleSignInAuthentication].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleSignInAuthentication extends _i1.Mock
    implements _i5.GoogleSignInAuthentication {
  MockGoogleSignInAuthentication() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [GoogleAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleAuthRepository extends _i1.Mock
    implements _i12.GoogleAuthRepository {
  MockGoogleAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Stream<_i6.UserAuth> get userStream =>
      (super.noSuchMethod(
            Invocation.getter(#userStream),
            returnValue: _i9.Stream<_i6.UserAuth>.empty(),
          )
          as _i9.Stream<_i6.UserAuth>);

  @override
  _i9.Future<_i6.UserAuth> signIn() =>
      (super.noSuchMethod(
            Invocation.method(#signIn, []),
            returnValue: _i9.Future<_i6.UserAuth>.value(
              _FakeUserAuth_9(this, Invocation.method(#signIn, [])),
            ),
          )
          as _i9.Future<_i6.UserAuth>);

  @override
  _i9.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<_i6.UserAuth?> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i9.Future<_i6.UserAuth?>.value(),
          )
          as _i9.Future<_i6.UserAuth?>);
}

/// A class which mocks [SignInWithGoogleUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInWithGoogleUseCase extends _i1.Mock
    implements _i13.SignInWithGoogleUseCase {
  MockSignInWithGoogleUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i6.UserAuth> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue: _i9.Future<_i6.UserAuth>.value(
              _FakeUserAuth_9(this, Invocation.method(#execute, [])),
            ),
          )
          as _i9.Future<_i6.UserAuth>);
}

/// A class which mocks [SignOutFromGoogleUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignOutFromGoogleUseCase extends _i1.Mock
    implements _i13.SignOutFromGoogleUseCase {
  MockSignOutFromGoogleUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);
}

/// A class which mocks [GetCurrentUserFromGoogleUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCurrentUserFromGoogleUseCase extends _i1.Mock
    implements _i13.GetCurrentUserFromGoogleUseCase {
  MockGetCurrentUserFromGoogleUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i6.UserAuth?> fetch() =>
      (super.noSuchMethod(
            Invocation.method(#fetch, []),
            returnValue: _i9.Future<_i6.UserAuth?>.value(),
          )
          as _i9.Future<_i6.UserAuth?>);
}

/// A class which mocks [GetUserStreamFromGoogleUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserStreamFromGoogleUseCase extends _i1.Mock
    implements _i13.GetUserStreamFromGoogleUseCase {
  MockGetUserStreamFromGoogleUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Stream<_i6.UserAuth> fetch() =>
      (super.noSuchMethod(
            Invocation.method(#fetch, []),
            returnValue: _i9.Stream<_i6.UserAuth>.empty(),
          )
          as _i9.Stream<_i6.UserAuth>);
}

/// A class which mocks [GoogleAuthFacade].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleAuthFacade extends _i1.Mock implements _i14.GoogleAuthFacade {
  MockGoogleAuthFacade() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i6.UserAuth> signInWithGoogle() =>
      (super.noSuchMethod(
            Invocation.method(#signInWithGoogle, []),
            returnValue: _i9.Future<_i6.UserAuth>.value(
              _FakeUserAuth_9(this, Invocation.method(#signInWithGoogle, [])),
            ),
          )
          as _i9.Future<_i6.UserAuth>);

  @override
  _i9.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<_i6.UserAuth?> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i9.Future<_i6.UserAuth?>.value(),
          )
          as _i9.Future<_i6.UserAuth?>);

  @override
  _i9.Stream<_i6.UserAuth> observeUserStream() =>
      (super.noSuchMethod(
            Invocation.method(#observeUserStream, []),
            returnValue: _i9.Stream<_i6.UserAuth>.empty(),
          )
          as _i9.Stream<_i6.UserAuth>);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i7.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Widget get widget =>
      (super.noSuchMethod(
            Invocation.getter(#widget),
            returnValue: _FakeWidget_10(this, Invocation.getter(#widget)),
          )
          as _i7.Widget);

  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);

  @override
  bool get debugDoingBuild =>
      (super.noSuchMethod(
            Invocation.getter(#debugDoingBuild),
            returnValue: false,
          )
          as bool);

  @override
  _i7.InheritedWidget dependOnInheritedElement(
    _i7.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #dependOnInheritedElement,
              [ancestor],
              {#aspect: aspect},
            ),
            returnValue: _FakeInheritedWidget_11(
              this,
              Invocation.method(
                #dependOnInheritedElement,
                [ancestor],
                {#aspect: aspect},
              ),
            ),
          )
          as _i7.InheritedWidget);

  @override
  void visitAncestorElements(_i7.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(#visitAncestorElements, [visitor]),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i7.ElementVisitor? visitor) => super.noSuchMethod(
    Invocation.method(#visitChildElements, [visitor]),
    returnValueForMissingStub: null,
  );

  @override
  void dispatchNotification(_i15.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(#dispatchNotification, [notification]),
        returnValueForMissingStub: null,
      );

  @override
  _i8.DiagnosticsNode describeElement(
    String? name, {
    _i8.DiagnosticsTreeStyle? style = _i8.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeElement, [name], {#style: style}),
            returnValue: _FakeDiagnosticsNode_12(
              this,
              Invocation.method(#describeElement, [name], {#style: style}),
            ),
          )
          as _i8.DiagnosticsNode);

  @override
  _i8.DiagnosticsNode describeWidget(
    String? name, {
    _i8.DiagnosticsTreeStyle? style = _i8.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeWidget, [name], {#style: style}),
            returnValue: _FakeDiagnosticsNode_12(
              this,
              Invocation.method(#describeWidget, [name], {#style: style}),
            ),
          )
          as _i8.DiagnosticsNode);

  @override
  List<_i8.DiagnosticsNode> describeMissingAncestor({
    required Type? expectedAncestorType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeMissingAncestor, [], {
              #expectedAncestorType: expectedAncestorType,
            }),
            returnValue: <_i8.DiagnosticsNode>[],
          )
          as List<_i8.DiagnosticsNode>);

  @override
  _i8.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#describeOwnershipChain, [name]),
            returnValue: _FakeDiagnosticsNode_12(
              this,
              Invocation.method(#describeOwnershipChain, [name]),
            ),
          )
          as _i8.DiagnosticsNode);
}

/// A class which mocks [GoRouterState].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockGoRouterState extends _i1.Mock implements _i16.GoRouterState {
  MockGoRouterState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Uri get uri =>
      (super.noSuchMethod(
            Invocation.getter(#uri),
            returnValue: _FakeUri_13(this, Invocation.getter(#uri)),
          )
          as Uri);

  @override
  String get matchedLocation =>
      (super.noSuchMethod(
            Invocation.getter(#matchedLocation),
            returnValue: _i10.dummyValue<String>(
              this,
              Invocation.getter(#matchedLocation),
            ),
          )
          as String);

  @override
  Map<String, String> get pathParameters =>
      (super.noSuchMethod(
            Invocation.getter(#pathParameters),
            returnValue: <String, String>{},
          )
          as Map<String, String>);

  @override
  _i8.ValueKey<String> get pageKey =>
      (super.noSuchMethod(
            Invocation.getter(#pageKey),
            returnValue: _FakeValueKey_14<String>(
              this,
              Invocation.getter(#pageKey),
            ),
          )
          as _i8.ValueKey<String>);

  @override
  String namedLocation(
    String? name, {
    Map<String, String>? pathParameters = const {},
    Map<String, String>? queryParameters = const {},
    String? fragment,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #namedLocation,
              [name],
              {
                #pathParameters: pathParameters,
                #queryParameters: queryParameters,
                #fragment: fragment,
              },
            ),
            returnValue: _i10.dummyValue<String>(
              this,
              Invocation.method(
                #namedLocation,
                [name],
                {
                  #pathParameters: pathParameters,
                  #queryParameters: queryParameters,
                  #fragment: fragment,
                },
              ),
            ),
          )
          as String);
}

/// A class which mocks [EmailAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmailAuthRepository extends _i1.Mock
    implements _i12.EmailAuthRepository {
  MockEmailAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Stream<_i17.Result<_i6.UserAuth?, _i12.AuthException>> get userStream =>
      (super.noSuchMethod(
            Invocation.getter(#userStream),
            returnValue:
                _i9.Stream<
                  _i17.Result<_i6.UserAuth?, _i12.AuthException>
                >.empty(),
          )
          as _i9.Stream<_i17.Result<_i6.UserAuth?, _i12.AuthException>>);

  @override
  _i9.Future<_i17.Result<_i6.UserAuth, _i12.AuthException>>
  signInWithEmailAndPassword(String? email, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmailAndPassword, [email, password]),
            returnValue: _i9.Future<
              _i17.Result<_i6.UserAuth, _i12.AuthException>
            >.value(
              _i10.dummyValue<_i17.Result<_i6.UserAuth, _i12.AuthException>>(
                this,
                Invocation.method(#signInWithEmailAndPassword, [
                  email,
                  password,
                ]),
              ),
            ),
          )
          as _i9.Future<_i17.Result<_i6.UserAuth, _i12.AuthException>>);

  @override
  _i9.Future<_i17.Result<_i6.UserAuth, _i12.AuthException>>
  signUpWithEmailAndPassword(String? email, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#signUpWithEmailAndPassword, [email, password]),
            returnValue: _i9.Future<
              _i17.Result<_i6.UserAuth, _i12.AuthException>
            >.value(
              _i10.dummyValue<_i17.Result<_i6.UserAuth, _i12.AuthException>>(
                this,
                Invocation.method(#signUpWithEmailAndPassword, [
                  email,
                  password,
                ]),
              ),
            ),
          )
          as _i9.Future<_i17.Result<_i6.UserAuth, _i12.AuthException>>);

  @override
  _i9.Future<_i17.Result<void, _i12.AuthException>> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue:
                _i9.Future<_i17.Result<void, _i12.AuthException>>.value(
                  _i10.dummyValue<_i17.Result<void, _i12.AuthException>>(
                    this,
                    Invocation.method(#signOut, []),
                  ),
                ),
          )
          as _i9.Future<_i17.Result<void, _i12.AuthException>>);

  @override
  _i9.Future<_i17.Result<_i6.UserAuth?, _i12.AuthException>> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i9.Future<
              _i17.Result<_i6.UserAuth?, _i12.AuthException>
            >.value(
              _i10.dummyValue<_i17.Result<_i6.UserAuth?, _i12.AuthException>>(
                this,
                Invocation.method(#getCurrentUser, []),
              ),
            ),
          )
          as _i9.Future<_i17.Result<_i6.UserAuth?, _i12.AuthException>>);
}

/// A class which mocks [SignInWithEmailAndPasswordUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInWithEmailAndPasswordUseCase extends _i1.Mock
    implements _i18.SignInWithEmailAndPasswordUseCase {
  MockSignInWithEmailAndPasswordUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i17.Result<_i6.UserAuth, _i12.AuthException>> execute({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [], {
              #email: email,
              #password: password,
            }),
            returnValue: _i9.Future<
              _i17.Result<_i6.UserAuth, _i12.AuthException>
            >.value(
              _i10.dummyValue<_i17.Result<_i6.UserAuth, _i12.AuthException>>(
                this,
                Invocation.method(#execute, [], {
                  #email: email,
                  #password: password,
                }),
              ),
            ),
          )
          as _i9.Future<_i17.Result<_i6.UserAuth, _i12.AuthException>>);
}

/// A class which mocks [SignUpWithEmailUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignUpWithEmailUseCase extends _i1.Mock
    implements _i19.SignUpWithEmailUseCase {
  MockSignUpWithEmailUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i17.Result<_i6.UserAuth, _i12.AuthException>> execute({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [], {
              #email: email,
              #password: password,
            }),
            returnValue: _i9.Future<
              _i17.Result<_i6.UserAuth, _i12.AuthException>
            >.value(
              _i10.dummyValue<_i17.Result<_i6.UserAuth, _i12.AuthException>>(
                this,
                Invocation.method(#execute, [], {
                  #email: email,
                  #password: password,
                }),
              ),
            ),
          )
          as _i9.Future<_i17.Result<_i6.UserAuth, _i12.AuthException>>);
}
